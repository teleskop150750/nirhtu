#include <iostream> // Подключаем библиотеку для работы с вводом-выводом
#include <fstream>  // Подключаем библиотеку для работы с файлами
#include <vector>   // Подключаем библиотеку для работы с векторами (динамическими массивами)

std::vector<std::vector<int>> createArray(int size);                                          // Прототип функции для создания двумерного массива заданного размера
void fillArray(std::vector<std::vector<int>> &arr);                                           // Прототип функции для заполнения двумерного массива
void printArray(const std::vector<std::vector<int>> &arr);                                    // Прототип функции для вывода двумерного массива на экран
void writeArrayToFile(const std::vector<std::vector<int>> &arr, const std::string &filename); // Прототип функции для записи двумерного массива в файл

int main() // Главная функция программы
{
    // 1. Создание
    auto arr = createArray(5); // Создаем двумерный массив размером 5x5

    // 2. Заполнение массива
    fillArray(arr); // Заполняем массив: устанавливаем единицы на диагоналях

    // 3. Вывод массива на экран
    printArray(arr); // Выводим массив на экран

    // 4. Запись массива в файл
    writeArrayToFile(arr, "array.txt"); // Записываем массив в файл с именем "array.txt"

    return 0; // Возвращаем 0, что означает успешное завершение программы
}

/**
 * Функция для создания двумерного массива заданного размера.
 * @param size Размер массива.
 * @return Двумерный массив размера size x size, заполненный нулями.
 */
std::vector<std::vector<int>> createArray(int size)
{
    std::vector<std::vector<int>> arr(size, std::vector<int>(size, 0));
    return arr; // Возвращаем созданный вектор
}

/**
 * Функция для заполнения двумерного массива.
 * Заполняет диагонали массива единицами.
 * @param arr Ссылка на двумерный массив.
 */
void fillArray(std::vector<std::vector<int>> &arr)
{
    const int size = arr.size();       // Получаем размер массива
    const int rowSize = arr[0].size(); // Получаем размер строки arr[i]
    const int middle = size / 2;       // Вычисляем середину массива

    for (int i = 0; i < size; i++) // Проходим по каждой строке массива
    {
        // Если i больше середины массива, то пропускаем итерацию
        if (i > middle)
        {
            continue;
        }

        for (int j = 0; j < rowSize; j++) // Проходим по каждому элементу строки
        {
            // Индекс элемента, симметричного элементу с индексом i
            int endIdx = rowSize - 1 - j;

            // Если текущий индекс равен индексу элемента или индексу симметричного элемента,
            // то устанавливаем значение элемента равным 1
            if (i == j || i == endIdx)
            {
                arr[i][j] = 1;
            }
        }
    }
}

/**
 * Функция для вывода двумерного массива на экран.
 * @param arr Константная ссылка на двумерный массив.
 */
void printArray(const std::vector<std::vector<int>> &arr)
{
    std::cout << "Вывод массива на экран:\n"; // Выводим начальное сообщение

    for (const auto &row : arr) // Проходим по каждой строке массива
    {
        for (int num : row) // В каждой строке проходим по каждому элементу
        {
            std::cout << num << ' '; // Выводим текущий элемент на экран
        }
        std::cout << '\n'; // Переходим на новую строку после вывода всех элементов текущей строки
    }

    std::cout << '\n'; // Выводим пустую строку для отделения вывода разных массивов
}

/**
 * Функция для записи двумерного массива в файл.
 * @param arr Константная ссылка на двумерный массив.
 * @param filename Имя файла для записи.
 */
void writeArrayToFile(const std::vector<std::vector<int>> &arr, const std::string &filename)
{
    std::ofstream file_out(filename); // Создаем объект ofstream для записи в файл с указанным именем

    for (const auto &row : arr) // Проходим по каждой строке массива
    {
        for (int num : row) // В каждой строке проходим по каждому элементу
        {
            file_out << num << ' '; // Записываем текущий элемент в файл
        }

        file_out << '\n'; // Переходим на новую строку в файле после записи всех элементов текущей строки
    }

    file_out.close(); // Закрываем файл после записи
}
